#!/usr/bin/env node
const $c = require('craydent/global');
const pkg = require('../package.json');
const utils = require('../utils/utils');
const { start } = require('../utils/start');
const defaultConfig = {
    changelog: './CHANGELOG.md',
    changelogTemplate: './changelogTemplate.md',
    promptTemplate: './promptTemplate.md',
    versions: [],
    transform: '',
    transformGitMessage: '',
    transformAuthor: ''
};
$c.DEBUG_MODE = true;

const options = [{
	option: "-c,--changelog",
	type: "string",
	default: "./CHANGELOG.md",
	description: "relative path to the [c]hangelog file (default: ./CHANGELOG.md)."
}, {
	option: "-t,--changelogTemplate",
	type: "string",
	default: "./changelogTemplate.md",
	description: "relative path to the [t]emplate file to use for the changelog entries (default: ./changelogTemplate.md)."
}, {
	option: "-p,--promptTemplate",
	type: "string",
	default: "./promptTemplate.md",
	description: "relative path to the [p]rompt template file to use when prompting the user  (default: ./promptTemplate.md)."
}, {
	option: "-r,--transform",
	type: "string",
	description: "specify middleware to inject to t[r]ansform the changelog entry."
}, {
	option: "-a,--transformAuthor",
	type: "string",
	description: "specify middleware to inject to transform the [a]uthor field."
}, {
	option: "-i,--transformGitMessage",
	type: "string",
	description: "specify middleware to inject to transform the g[i]t message."
}, {
	option: "-e,--versions",
	type: "string",
	default: "",
	description: "specify comma separated list of v[e]rsions to update the changelog  (major | minor | patch | premajor | preminor | prepatch | prerelease | from-git)."
}, {
	option: "-o,--config",
	type: "string",
	description: "specify a c[o]nfig file to use instead of using command line options."
}, {
	option: "-v,--version",
	type: "string",
	description: "indicates the current [v]ersion of Package auto version."
}];
var CL = new $c.CLI({
	name: "Package auto version",
	synopsis: "Command line interface to auto generate changelog entries and increment the package.json version.",
	description: "This CLI generate entries in the changelog based on git commits as well as update the package.json version field based on the input provided."
});

if (CL.isMan) {
	console.log(CL.renderMan());
	return process.exit();
}
if (CL.isHelp) {
	console.log(CL.renderHelp());
	return process.exit();
}

CL.command("version  \t- indicates the current version of Package auto version.")
	.action(version);

CL
	.command("completion", options)
	.action(completion)

var commands = ["major", "minor", "patch", "premajor", "preminor", "prepatch", "prerelease", "from-git"];
for (var i = 0, len = commands.length; i < len; i++) {
	CL.command(commands[i], options)
		.action(init)
}
CL.command("*", options)
	.action(init)
	.action(version);

function version() {
	if (CL.CommandName == "version" || CL.version === true) {
		console.log(pkg.version);
		return process.exit();
	}
}
function completion() {
	if (CL.CommandName == "completion") {
		let fs = require('fs');
		console.log(fs.readFileSync(`${__dirname}/completion.sh`,'utf8'));
		return process.exit();
	}
}
async function init() {
	if (CL.version === true) { return; }
	if (CL.Arguments.length) {
		console.log(CL.renderHelp());
		return process.exit();
	}
	let config = {};

	if (CL.CommandName != "*") {
		config.version = CL.CommandName;
	}
	if (CL.t != defaultConfig.changelogTemplate) {
		config.changelogTemplate = CL.t;
	}
	if (CL.p != defaultConfig.promptTemplate) {
		config.promptTemplate = CL.p;
	}
	if (CL.r != defaultConfig.transform) {
		config.transform = CL.r;
	}
	if (CL.a != defaultConfig.transformAuthor) {
		config.transformAuthor = CL.a;
	}
	if (CL.i != defaultConfig.transformGitMessage) {
		config.transformGitMessage = CL.i;
	}
	if (CL.e) {
		config.versions = CL.e.split(',');
	}
	if (CL.c != defaultConfig.changelog) {
		config.changelog = CL.c;
	}
	if (CL.o != defaultConfig.config) {
		config.config = CL.o;
	}
	utils.setConfig(config);
	await start()
	// process.exit();
}